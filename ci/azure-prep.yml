# Preparatory stage -- assign versions, prep Zenodo, etc.

jobs:
- job: main
  pool:
    vmImage: ubuntu-latest

  ${{ if and(eq(variables['Build.SourceBranchName'], 'rc'), ne(variables['build.reason'], 'PullRequest')) }}:
    variables:
    - group: Deployment Credentials

  steps:
  - checkout: self

  - bash: |
      set -e
      rustup set profile minimal
      rustup component remove --toolchain=$TOOLCHAIN rust-docs || echo "already removed"
      rustup update --no-self-update $TOOLCHAIN
      rustup default $TOOLCHAIN
      # Log versions
      set -ex
      rustup -V
      rustc -Vv
      cargo -V
    displayName: Set up Rust
    env:
      TOOLCHAIN: stable

  - bash: |
      set -euo pipefail
      d="$(mktemp -d /tmp/cranko.XXXXXX)"
      cd "$d"
      curl --proto '=https' --tlsv1.2 -sSf https://pkgw.github.io/cranko/fetch-latest.sh | sh
      echo "##vso[task.prependpath]$d"
    displayName: Install latest Cranko

  - bash: cranko release-workflow apply-versions
    displayName: cranko release-workflow apply-versions

  # This step should only supply $ZENODO_TOKEN to trusted builds; i.e. it should
  # not be present on PR builds, and Cranko will error out if it is there. But
  # the `if` statement doesn't provide any true security since an attacker can
  # just remove it â€” the CI system has to know that the token is secure and
  # refuse to provide it.
  - bash: |
      cranko zenodo preregister --metadata=ci/zenodo.json5 rubbl cli/src/main.rs cli/CHANGELOG.md
    displayName: "cranko zenodo preregister"
    ${{ if and(eq(variables['Build.SourceBranchName'], 'rc'), ne(variables['build.reason'], 'PullRequest')) }}:
      env:
          ZENODO_TOKEN: $(ZENODO_TOKEN)

  # Do an extremely minimal build to get Cargo.lock updated.
  - bash: cargo build -p rubbl_core
    displayName: Mini-build to freshen Cargo.lock

  - bash: |
      set -xeuo pipefail
      git add .
      cranko release-workflow commit
      git show
    displayName: Generate release commit

  - bash: |
      set -xeuo pipefail
      artifact_dir="$(Build.ArtifactStagingDirectory)/git-release"
      mkdir -p "$artifact_dir"
      git bundle create "$artifact_dir/release.bundle" origin/master..HEAD
    displayName: Bundle release commit

  - task: PublishPipelineArtifact@1
    displayName: Publish git bundle artifact
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/git-release'
      artifactName: git-release
